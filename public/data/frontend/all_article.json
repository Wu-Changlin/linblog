{

    "article_count":9,
    "article_list":[
        { "id": 20,

            "title": "v前端开发是创建Web页面或APP等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互的过程",

           "article_content": "<h2>3.2. 【拉开序幕的 setup】</h2>\n<h3>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在<code>setup</code>中。</p>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。\n<pre><code class=\"language-vue\">\n&lt;template&gt;\n&lt;div class=\"person\"&gt;\n&lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n&lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n&lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n&lt;button @click=\"changeAge\"&gt;年龄+1&lt;/button&gt;\n&lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;</code></pre></li>\n</ul>\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n<pre><code>### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n```jsx\nsetup(){\n  return ()=&gt; '你好啊！'\n}</code></pre>\n<h3>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>......）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>......）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。\n<h3>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p></li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n    &lt;button @click=\"changName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changAge\"&gt;年龄+1&lt;/button&gt;\n    &lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\"&gt;\n  export default {\n    name:'Person',\n  }\n&lt;/script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang=\"ts\"&gt;\n  console.log(this) //undefined\n\n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n&lt;/script&gt;</code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code>\n<pre><code class=\"language-jsx\">\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'</code></pre></li>\n</ol>\n<p>export default defineConfig({<br />\nplugins: [ VueSetupExtend() ]<br />\n})</p>\n<pre><code>\n\n3. 第三步：`&lt;script setup lang=\"ts\" name=\"Person\"&gt;`</code></pre>"
        },
        { "id": 21,

        "title": "这三个是前端开发中最基本也是最必须的三个技能。前端的开发中，在页面的布局时， HTML将元素进行定义，CSS对展示的元素进行定位，再通过JavaScript实现相应的效果和交互。",
"article_content": "<h1>3. Vue3核心语法</h1>\n<h2>3.1.  【OptionsAPI 与 CompositionAPI】</h2>\n<ul>\n<li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li>\n<li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。\n<h3>Options API 的弊端</h3></li>\n</ul>\n<p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p>\n<p><img src=\"images/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif\" alt=\"1.gif\" style=\"zoom:70%;border-radius:20px\" /><img src=\"images/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif\" alt=\"2.gif\" style=\"zoom:70%;border-radius:20px\" /></p>\n<h3>Composition API 的优势</h3>\n<p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p>\n<p><img src=\"images/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif\" alt=\"3.gif\" style=\"height:300px;border-radius:10px\"  /><img src=\"images/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif\" alt=\"4.gif\" style=\"height:300px;border-radius:10px\"  /></p>\n<blockquote>\n<p>说明：以上四张动图原创作者：大帅老猿</p>\n</blockquote>"
              
          },
        { "id": 30,

        "menu_title":"后端",

        "title": "v后端（Back-end）： 执行应用的核心逻辑，处理用户的请求，与数据库交互，返回相应的数据。",

   "article_content":"<h2>2.3. 【一个简单的效果】</h2>\n<p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n    &lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changeAge\"&gt;年龄+1&lt;/button&gt;\n    &lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\"&gt;\n  export default {\n    name:'App',\n    data() {\n      return {\n        name:'张三',\n        age:18,\n        tel:'13888888888'\n      }\n    },\n    methods:{\n      changeName(){\n        this.name = 'zhang-san'\n      },\n      changeAge(){\n        this.age += 1\n      },\n      showTel(){\n        alert(this.tel)\n      }\n    },\n  }\n&lt;/script&gt;</code></pre>"

        },
        {"id": 31,

            "title": "后端就像是一家餐厅的厨房，负责做菜的师傅。用户在餐厅点餐（操作前台），后端就是为了满足这些订单，做好各种各样的菜式。用户点了什么菜、吃了多少，都是后端知道的。",

            "article_content": "<h2>2.2. 【基于 vite 创建】(推荐)</h2>\n<p><code>vite</code> 是新一代前端构建工具，官网地址：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p>\n<ul>\n<li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li>\n<li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n<li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br />\n<img src=\"images/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png\" alt=\"webpack构建\" title=\"webpack构建\" style=\"zoom:20%;box-shadow:0 0 10px black\" />    <img src=\"images/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png\" alt=\"vite构建\" title=\"vite构建\" style=\"zoom: 20%;box-shadow:0 0 10px black\" /></li>\n<li>具体操作如下（点击查看<a href=\"https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application\">官方文档</a>）</li>\n</ul>\n<pre><code class=\"language-powershell\">## 1.创建命令\nnpm create vue@latest\n\n## 2.具体配置\n## 配置项目名称\n√ Project name: vue3_test\n## 是否添加TypeScript支持\n√ Add TypeScript?  Yes\n## 是否添加JSX支持\n√ Add JSX Support?  No\n## 是否添加路由环境\n√ Add Vue Router for Single Page Application development?  No\n## 是否添加pinia环境\n√ Add Pinia for state management?  No\n## 是否添加单元测试\n√ Add Vitest for Unit Testing?  No\n## 是否添加端到端测试方案\n√ Add an End-to-End Testing Solution? » No\n## 是否添加ESLint语法检查\n√ Add ESLint for code quality?  Yes\n## 是否添加Prettiert代码格式化\n√ Add Prettier for code formatting?  No</code></pre>\n<p>自己动手编写一个App组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"app\"&gt;\n    &lt;h1&gt;你好啊！&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\"&gt;\n  export default {\n    name:'App' //组件名\n  }\n&lt;/script&gt;\n\n&lt;style&gt;\n  .app {\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  }\n&lt;/style&gt;</code></pre>\n<p>安装官方推荐的<code>vscode</code>插件：</p>\n<img src=\"images/volar.png\" alt=\"Snipaste_2023-10-08_20-46-34\" style=\"zoom:50%;\" /> \n<img src=\"images/image-20231218085906380.png\" alt=\"image-20231218085906380\" style=\"zoom:42%;\" /> \n<p>总结：</p>\n<ul>\n<li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li>\n<li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=\"module\" src=\"xxx\"&gt;</code> 指向的<code>JavaScript</code>。</li>\n<li><code>Vue3</code><strong>中是通过 </strong><code>createApp</code> 函数创建一个应用实例。</li>\n</ul>"
            
          },
          {"id": 32,

            "title": "后端是指应用程序的服务器端，负责处理用户请求、执行业务逻辑、与数据库交互等任务。它和前端（用户界面）协同工作，完成整个应用的功能。",

            "article_content": "<h1>2. 创建Vue3工程</h1>\n<h2>2.1. 【基于 vue-cli 创建】</h2>\n<p>点击查看<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">官方文档</a></p>\n<blockquote>\n<p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p>\n</blockquote>\n<pre><code class=\"language-powershell\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n\n## 安装或者升级你的@vue/cli \nnpm install -g @vue/cli\n\n## 执行创建命令\nvue create vue_test\n\n##  随后选择3.x\n##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)\n##  &gt; 3.x\n##    2.x\n\n## 启动\ncd vue_test\nnpm run serve</code></pre>\n<hr />"
            
          }, 
          {"id": 50,

            "title": "随笔，作为一种自由的散文体裁，让我能够随心所欲地记录生活中的点滴感悟。",
             "article_content":"<p>|  sfaf | yy  |\n| ------------ | ------------ |\n| vg  |  kkk |\n|  44 |  uuu |</p>\n"
            

          },
          {"id": 51,

            "title": "极淡，像被人随手抛的，四散开来，看着天空，嘴角不禁上扬，忍不住的，笑了。",

              "article_content":"<h2>3.4. 【reactive 创建：对象类型的响应式数据】</h2>\n<ul>\n<li><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li>\n<li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li>\n<li><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</li>\n<li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。\n<pre><code class=\"language-vue\">\n&lt;template&gt;\n&lt;div class=\"person\"&gt;\n&lt;h2&gt;汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万&lt;/h2&gt;\n&lt;h2&gt;游戏列表：&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li v-for=\"g in games\" :key=\"g.id\"&gt;{{ g.name }}&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;测试：{{obj.a.b.c.d}}&lt;/h2&gt;\n&lt;button @click=\"changeCarPrice\"&gt;修改汽车价格&lt;/button&gt;\n&lt;button @click=\"changeFirstGame\"&gt;修改第一游戏&lt;/button&gt;\n&lt;button @click=\"test\"&gt;测试&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;</code></pre></li>\n</ul>\n<script lang=\"ts\" setup name=\"Person\">\nimport { reactive } from 'vue'\n\n// 数据\nlet car = reactive({ brand: '奔驰', price: 100 })\nlet games = reactive([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = reactive({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nfunction changeCarPrice() {\n  car.price += 10\n}\nfunction changeFirstGame() {\n  games[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.a.b.c.d = 999\n}\n</script>\n<pre><code></code></pre>"
            
          },
          { "id": 52,

            "title": "晴天！天气好的让我兴奋，蓝白色的天空中一条条浅浅的云条，",
             "article_content":"<h2>3.5. 【ref 创建：对象类型的响应式数据】</h2>\n<ul>\n<li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li>\n<li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。\n<pre><code class=\"language-vue\">\n&lt;template&gt;\n&lt;div class=\"person\"&gt;\n&lt;h2&gt;汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万&lt;/h2&gt;\n&lt;h2&gt;游戏列表：&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li v-for=\"g in games\" :key=\"g.id\"&gt;{{ g.name }}&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;测试：{{obj.a.b.c.d}}&lt;/h2&gt;\n&lt;button @click=\"changeCarPrice\"&gt;修改汽车价格&lt;/button&gt;\n&lt;button @click=\"changeFirstGame\"&gt;修改第一游戏&lt;/button&gt;\n&lt;button @click=\"test\"&gt;测试&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;</code></pre></li>\n</ul>\n<script lang=\"ts\" setup name=\"Person\">\nimport { ref } from 'vue'\n\n// 数据\nlet car = ref({ brand: '奔驰', price: 100 })\nlet games = ref([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = ref({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nconsole.log(car)\n\nfunction changeCarPrice() {\n  car.value.price += 10\n}\nfunction changeFirstGame() {\n  games.value[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.value.a.b.c.d = 999\n}\n</script>\n<pre><code></code></pre>"
            

          },
          { "id": 53,

            "title": "回忆往昔 过去的一年,仿佛是一幅画面在我脑海中不断闪回。",
"article_content":"<h2>3.6. 【ref 对比 reactive】</h2>\n<p>宏观角度看：</p>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p>\n</li>\n<li>\n<p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>区别：</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p>\n<img src=\"images/自动补充value.png\" alt=\"自动补充value\" style=\"zoom:50%;border-radius:20px\" /> \n</li>\n<li>\n<p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>使用原则：\n<blockquote>\n<ol>\n<li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li>\n<li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li>\n<li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li>\n</ol>\n</blockquote></li>\n</ul>"
            
          },
          {"id": 54,

            "title": "我坐在窗前,望着窗外摇曳的树叶,思绪的小舟顺着小河般的记忆逆流而上,一幕幕的记忆浮现在脑海",

           "article_content": "<h2>3.7. 【toRefs 与 toRef】</h2>\n<ul>\n<li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li>\n<li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li>\n<li>语法如下：\n<pre><code class=\"language-vue\">\n&lt;template&gt;\n&lt;div class=\"person\"&gt;\n&lt;h2&gt;姓名：{{person.name}}&lt;/h2&gt;\n&lt;h2&gt;年龄：{{person.age}}&lt;/h2&gt;\n&lt;h2&gt;性别：{{person.gender}}&lt;/h2&gt;\n&lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n&lt;button @click=\"changeAge\"&gt;修改年龄&lt;/button&gt;\n&lt;button @click=\"changeGender\"&gt;修改性别&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;</code></pre></li>\n</ul>\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,reactive,toRefs,toRef} from 'vue'\n\n  // 数据\n  let person = reactive({name:'张三', age:18, gender:'男'})\n\n  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let {name,gender} =  toRefs(person)\n\n  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age = toRef(person,'age')\n\n  // 方法\n  function changeName(){\n    name.value += '~'\n  }\n  function changeAge(){\n    age.value += 1\n  }\n  function changeGender(){\n    gender.value = '女'\n  }\n</script>\n<pre><code></code></pre>"
            
          },
          {"id": 55,

            "title": "一种以随笔记录为主的著作体裁，多由分条的短篇汇集而成。",
             "article_content":"<h2>3.8. 【computed】</h2>\n<p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p>\n<img src=\"images/computed.gif\" style=\"zoom:20%;\" />  \n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    姓：&lt;input type=\"text\" v-model=\"firstName\"&gt; &lt;br&gt;\n    名：&lt;input type=\"text\" v-model=\"lastName\"&gt; &lt;br&gt;\n    全名：&lt;span&gt;{{fullName}}&lt;/span&gt; &lt;br&gt;\n    &lt;button @click=\"changeFullName\"&gt;全名改为：li-si&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\" name=\"App\"&gt;\n  import {ref,computed} from 'vue'\n\n  let firstName = ref('zhang')\n  let lastName = ref('san')\n\n  // 计算属性——只读取，不修改\n  /* let fullName = computed(()=&gt;{\n    return firstName.value + '-' + lastName.value\n  }) */\n\n  // 计算属性——既读取又修改\n  let fullName = computed({\n    // 读取\n    get(){\n      return firstName.value + '-' + lastName.value\n    },\n    // 修改\n    set(val){\n      console.log('有人修改了fullName',val)\n      firstName.value = val.split('-')[0]\n      lastName.value = val.split('-')[1]\n    }\n  })\n\n  function changeFullName(){\n    fullName.value = 'li-si'\n  } \n&lt;/script&gt;</code></pre>"
            

          },
          {"id": 56,

            "title": "以前的我们,天真无邪,充满着稚气,用一根棒棒糖、或者冰棍就能哄的孩纸。",

              "article_content":"<h2>3.9.【watch】</h2>\n<ul>\n<li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li>\n<li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：\n<blockquote>\n<ol>\n<li><code>ref</code>定义的数据。</li>\n<li><code>reactive</code>定义的数据。</li>\n<li>函数返回一个值（<code>getter</code>函数）。</li>\n<li>一个包含上述内容的数组。</li>\n</ol>\n</blockquote></li>\n</ul>\n<p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p>\n<h3>* 情况一</h3>\n<p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;\n    &lt;h2&gt;当前求和为：{{sum}}&lt;/h2&gt;\n    &lt;button @click=\"changeSum\"&gt;点我sum+1&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\" setup name=\"Person\"&gt;\n  import {ref,watch} from 'vue'\n  // 数据\n  let sum = ref(0)\n  // 方法\n  function changeSum(){\n    sum.value += 1\n  }\n  // 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch = watch(sum,(newValue,oldValue)=&gt;{\n    console.log('sum变化了',newValue,oldValue)\n    if(newValue &gt;= 10){\n      stopWatch()\n    }\n  })\n&lt;/script&gt;</code></pre>\n<h3>* 情况二</h3>\n<p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>\n<p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p>\n</li>\n<li>\n<p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p>\n</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;\n    &lt;h2&gt;姓名：{{ person.name }}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{ person.age }}&lt;/h2&gt;\n    &lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changeAge\"&gt;修改年龄&lt;/button&gt;\n    &lt;button @click=\"changePerson\"&gt;修改整个人&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\" setup name=\"Person\"&gt;\n  import {ref,watch} from 'vue'\n  // 数据\n  let person = ref({\n    name:'张三',\n    age:18\n  })\n  // 方法\n  function changeName(){\n    person.value.name += '~'\n  }\n  function changeAge(){\n    person.value.age += 1\n  }\n  function changePerson(){\n    person.value = {name:'李四',age:90}\n  }\n  /* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  */\n  watch(person,(newValue,oldValue)=&gt;{\n    console.log('person变化了',newValue,oldValue)\n  },{deep:true})\n\n&lt;/script&gt;</code></pre>\n<h3>*  情况三</h3>\n<p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;\n    &lt;h2&gt;姓名：{{ person.name }}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{ person.age }}&lt;/h2&gt;\n    &lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changeAge\"&gt;修改年龄&lt;/button&gt;\n    &lt;button @click=\"changePerson\"&gt;修改整个人&lt;/button&gt;\n    &lt;hr&gt;\n    &lt;h2&gt;测试：{{obj.a.b.c}}&lt;/h2&gt;\n    &lt;button @click=\"test\"&gt;修改obj.a.b.c&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\" setup name=\"Person\"&gt;\n  import {reactive,watch} from 'vue'\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18\n  })\n  let obj = reactive({\n    a:{\n      b:{\n        c:666\n      }\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changePerson(){\n    Object.assign(person,{name:'李四',age:80})\n  }\n  function test(){\n    obj.a.b.c = 888\n  }\n\n  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)=&gt;{\n    console.log('person变化了',newValue,oldValue)\n  })\n  watch(obj,(newValue,oldValue)=&gt;{\n    console.log('Obj变化了',newValue,oldValue)\n  })\n&lt;/script&gt;</code></pre>\n<h3>* 情况四</h3>\n<p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p>\n<ol>\n<li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li>\n<li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li>\n</ol>\n<p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;\n    &lt;h2&gt;姓名：{{ person.name }}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{ person.age }}&lt;/h2&gt;\n    &lt;h2&gt;汽车：{{ person.car.c1 }}、{{ person.car.c2 }}&lt;/h2&gt;\n    &lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changeAge\"&gt;修改年龄&lt;/button&gt;\n    &lt;button @click=\"changeC1\"&gt;修改第一台车&lt;/button&gt;\n    &lt;button @click=\"changeC2\"&gt;修改第二台车&lt;/button&gt;\n    &lt;button @click=\"changeCar\"&gt;修改整个车&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\" setup name=\"Person\"&gt;\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;{\n    console.log('person.name变化了',newValue,oldValue)\n  }) */\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()=&gt;person.car,(newValue,oldValue)=&gt;{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n&lt;/script&gt;</code></pre>\n<h3>* 情况五</h3>\n<p>监视上述的多个数据</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;\n    &lt;h2&gt;姓名：{{ person.name }}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{ person.age }}&lt;/h2&gt;\n    &lt;h2&gt;汽车：{{ person.car.c1 }}、{{ person.car.c2 }}&lt;/h2&gt;\n    &lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changeAge\"&gt;修改年龄&lt;/button&gt;\n    &lt;button @click=\"changeC1\"&gt;修改第一台车&lt;/button&gt;\n    &lt;button @click=\"changeC2\"&gt;修改第二台车&lt;/button&gt;\n    &lt;button @click=\"changeCar\"&gt;修改整个车&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\" setup name=\"Person\"&gt;\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况五：监视上述的多个数据\n  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n\n&lt;/script&gt;</code></pre>"
            
          }

    ]
    
}