{

    "id": 30,
    "menu_id": 3,
    "menu_title":"后端",
    "tag_ids": "30,31,32",
    "tag_ids_name": "C++,Java,Python", 
    "visits": 3000,
    "word_count": 30000,
    "read_time": "19:47",
    "title": "后端（Back-end）： 执行应用的核心逻辑，处理用户的请求，与数据库交互，返回相应的数据。",
    "author_name": "原创",
    "created_time":"2024-09-13 23:29:17",
    "article_content": "<h2>3.2. 【拉开序幕的 setup】</h2>\n<h3>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在<code>setup</code>中。</p>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。\n<pre><code class=\"language-vue\">\n&lt;template&gt;\n&lt;div class=\"person\"&gt;\n&lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n&lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n&lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n&lt;button @click=\"changeAge\"&gt;年龄+1&lt;/button&gt;\n&lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;</code></pre></li>\n</ul>\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n<pre><code>### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n```jsx\nsetup(){\n  return ()=&gt; '你好啊！'\n}</code></pre>\n<h3>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>......）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>......）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。\n<h3>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p></li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n    &lt;button @click=\"changName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changAge\"&gt;年龄+1&lt;/button&gt;\n    &lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\"&gt;\n  export default {\n    name:'Person',\n  }\n&lt;/script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang=\"ts\"&gt;\n  console.log(this) //undefined\n\n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n&lt;/script&gt;</code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code>\n<pre><code class=\"language-jsx\">\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'</code></pre></li>\n</ol>\n<p>export default defineConfig({<br />\nplugins: [ VueSetupExtend() ]<br />\n})</p>\n<pre><code>\n\n3. 第三步：`&lt;script setup lang=\"ts\" name=\"Person\"&gt;`</code></pre>"

}

