{

    "id": 30,
    "menu_id": 3,
    "menu_title":"后端",
    "tag_ids": "30,31,32",
    "tag_ids_name": "C++,Java,Python", 
    "visits": 3000,
    "word_count": 30000,
    "read_time": "19:47",
    "title": "后端（Back-end）： 执行应用的核心逻辑，处理用户的请求，与数据库交互，返回相应的数据。",
    "author_name": "原创",
    "created_time":"2024-09-13 23:29:17",
   
"article_content": "<h2>3.2. 【拉开序幕的 setup】</h2>\n<h3>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在<code>setup</code>中。</p>\n<pre><code class=\"language-go\">package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Google\" + \"Runoob\")\n}</code></pre>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Text with Horizontal Line&lt;/title&gt;\n&lt;style&gt;\nhtml,body{\n  font-family: -apple-system, \"BlinkMacSystemFont\", sans-serif;\n  margin: 0;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  background: #fff;\n  gap: 20px;\n  accent-color: #9747FF;\n}\n.wrap{\n  width: 300px;\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  outline: 2px solid #9747FF;\n  gap: 5px;\n  overflow: hidden;\n}\n.con{\n  position: relative;\n  display: flex;\n  gap: 5px;\n  padding: 5px;\n  overflow: hidden;\n  counter-reset: num;\n  animation: check;\n  animation-timeline: scroll(x self);\n  margin-right: -46px;\n}\n@keyframes check{\n  from,to {\n    margin-right: 0;\n    -webkit-mask: linear-gradient(to right, #fff calc(100% - 30px), transparent);\n  }\n}\n.wrap::after{\n  content: counter(num);\n  padding: .2em .5em;\n  background-color: #FFE8A3;\n  color: #191919;\n  border-radius: 4px;\n}\n.tag{\n  padding: .2em .5em;\n  background-color: #c49ef5;\n  color: #fff;\n  border-radius: 4px;\n  counter-increment: num 1;\n  animation: appear;\n  animation-timeline: view(inline);\n  animation-range: contain;\n}\n@keyframes appear{\n  from,to {\n    background-color: #9747FF;\n    counter-increment: num 0;\n  }\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"wrap\"&gt;\n        &lt;div class=\"con\" style=\"--num:7\"&gt;\n          &lt;a class=\"tag\"&gt;HTML&lt;/a&gt;\n          &lt;a class=\"tag\"&gt;CSS&lt;/a&gt;\n          &lt;a class=\"tag\"&gt;JavaScript&lt;/a&gt;\n          &lt;a class=\"tag\"&gt;Flutter&lt;/a&gt;\n          &lt;a class=\"tag\"&gt;Vue&lt;/a&gt;\n          &lt;a class=\"tag\"&gt;React&lt;/a&gt;\n          &lt;a class=\"tag\"&gt;Svelte&lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\n\nconst counterElement = document.querySelector('.wrap');\nconst counterValue = window.getComputedStyle(counterElement, '::after').content;\n\nconsole.log('Counter value:', counterValue);\n//获取log和菜单导航栏   // 获取网站配置（如网站标题、网站关键词、网站描述、底部备案、网站log）\nfunction getLayoutLogOrMenuListData(){\n      // 如果你想使用axios来模拟请求，可以这样做\n      proxy.$get('/data/frontend/layout.json')\n      .then(response =&gt; {\n        // setTimeout(() =&gt; {\n            article_page_log.value = response.log_data; // log\n            article_page_menu_list_data.value = response.menu_data; // 菜单数据\n        // }, 3000); // 假设加载时间是3秒\n\n        // setTimeout(() =&gt; {\n            //在组件挂载后调用方法获取数据\n            getSearchKeywordMatchArticleListDataFunction();\n        // }, 3000); // 延迟3秒\n\n      })\n      .catch(error =&gt; {\n\n        proxy.$Message('请求未找到', 'error');\n      });\n\n}\n\n// 使用指令高亮代码块\nconst vHighlight  = {\n    mounted(el) {\n    let blocks = el.querySelectorAll('pre code');\n    //添加line-numbers类名到自己的项目，在这里我添加到了v-html要解析的那个标签上，\n    //因为后台返回的编辑数据都是在该标签内渲染，所以该标签属于pre标签的祖先元素，\n    //你也可以将line-numbers类名添加到该div的祖先父级元素中，又或者可以添加到body上，\n    //但建议添加到这个v-html要渲染的签上，因为只有该标签内的数据是要被渲染解析的。\n\n    //添加class用于显示行号，全局代码高亮。\n    const pre =el.querySelectorAll('pre');\n    pre.forEach((block) =&gt; {\n        // block.classList.add('line-numbers');\n\n        // 使用正则表达式检查class类字符串是否包含language类名\n        const languageRegex = /language=\"([^\"]+)\"/;\n        // if (!languageRegex.test(block.className)) {\n        //     // 如果没有language类名，那么在元素中添加一个类名是language-html\n        //     block.classList.add('language-html')\n        // }\n        //  Prism.highlightAll()// 全局代码高亮\n    })\n\n    blocks.forEach((block) =&gt; {\n\n        if (!block.className) {\n          // 如果没有设置language类，则设置默认样式\n\n        //   block.classList.add('language-html')\n        }\n        // \n\n        const language=block.className.split('-')[1];\n        const text=block.innerHTML;\n        // console.log('innerHTML:',text ) \n\n    // 高亮代码块\n    if(!Prism.languages[language]){\n\n      // block.classList.add('language-jsx');\n      // console.log('block.className.split('-')[1]:',block.className.split('-')[1]);\n    }\n\n    block.classList.add('line-numbers');\n\n  //  console.log(Prism.languages['vue']);\n\n    Prism.highlightElement(block);\n  })\n\n  }\n}\n&lt;/script&gt;\n&lt;/html&gt;</code></pre>\n<ul>\n<li>\n<p><code>Vue2</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>beforeCreate</code>、<code>created</code></p>\n<p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p>\n<p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p>\n<p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>日期</th>\n<th>月</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>09</td>\n<td>09</td>\n</tr>\n<tr>\n<td>09</td>\n<td>08</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。\n<pre><code class=\"language-vue\">\n&lt;template&gt;\n&lt;div class=\"person\"&gt;\n&lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n&lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n&lt;button @click=\"changeName\"&gt;修改名字&lt;/button&gt;\n&lt;button @click=\"changeAge\"&gt;年龄+1&lt;/button&gt;\n&lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;</code></pre></li>\n</ul>\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n<pre><code>\n### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n```jsx\nsetup(){\n  return ()=&gt; '你好啊！'\n}</code></pre>\n<h3>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>......）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>......）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。\n<h3>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p></li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=\"person\"&gt;\n    &lt;h2&gt;姓名：{{name}}&lt;/h2&gt;\n    &lt;h2&gt;年龄：{{age}}&lt;/h2&gt;\n    &lt;button @click=\"changName\"&gt;修改名字&lt;/button&gt;\n    &lt;button @click=\"changAge\"&gt;年龄+1&lt;/button&gt;\n    &lt;button @click=\"showTel\"&gt;点我查看联系方式&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\"&gt;\n  export default {\n    name:'Person',\n  }\n&lt;/script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang=\"ts\"&gt;\n  console.log(this) //undefined\n\n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n&lt;/script&gt;</code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code>\n<pre><code class=\"language-jsx\">\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'</code></pre></li>\n</ol>\n<p>export default defineConfig({<br />\nplugins: [ VueSetupExtend() ]<br />\n})</p>\n<pre><code>\n\n3. 第三步：`&lt;script setup lang=\"ts\" name=\"Person\"&gt;`</code></pre>"  ,
"article_url":"http://localhost:8989/article?id=30",
"website_url":"/",
"website_name":"LinBlog",
"prev_article_id": 29,
"prev_article_title":"原生开发者要学习HTML、CSS、JS等前端知识，前端开发人员也要学习Android或iOS的原生开发技术。",
"prev_article_abstract":"如果有摘要就输出摘要，没有摘要输出一段文字 ",
"prev_article_url":"http://localhost:8989/article?id=29",
"next_article_id":31,
"next_article_title":"后端就像是一家餐厅的厨房，负责做菜的师傅。用户在餐厅点餐（操作前台），后端就是为了满足这些订单，做好各种各样的菜式。用户点了什么菜、吃了多少，都是后端知道的。",
"next_article_abstract":"如果有摘要就输出摘要，没有摘要输出一段文字 ",
"next_article_url":"http://localhost:8989/article?id=31",
"license_url":"http://creativecommons.org/licenses/by-nc-sa/4.0/",
"license_description":"知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议"
}

